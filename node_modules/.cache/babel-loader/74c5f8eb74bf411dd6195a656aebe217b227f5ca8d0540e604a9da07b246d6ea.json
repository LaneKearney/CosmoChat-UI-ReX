{"ast":null,"code":"var _jsxFileName = \"/Users/lanekearney/Downloads/cosmochat-ui-rex/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { BrowserRouter as Router, Route, Routes } from 'react-router-dom';\nimport './App.css';\nimport '@chatscope/chat-ui-kit-styles/dist/default/styles.min.css';\nimport { ChatContainer, MessageList, Message, MessageInput, TypingIndicator, MainContainer } from \"@chatscope/chat-ui-kit-react\";\nimport LandingPage from './components/LandingPage';\nimport Chat from './components/Chat';\nimport { messaging, getToken, onMessage } from './firebase-config';\n\n// Define your API_KEY here or better yet, use an environment variable\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_KEY = \"sk-proj-9ohctNN2DMHwcBtkKXbCT3BlbkFJnltg82Pj7zjyQMe6AzI0\";\nconst App = () => {\n  _s();\n  useEffect(() => {\n    // Request permission to send notifications\n    const requestPermission = async () => {\n      try {\n        const permission = await Notification.requestPermission();\n        if (permission === 'granted') {\n          console.log('Notification permission granted.');\n          // Get FCM token\n          const token = await getToken(messaging, {\n            vapidKey: 'YOUR_VAPID_KEY'\n          });\n          console.log('FCM Token:', token);\n        } else {\n          console.log('Unable to get permission to notify.');\n        }\n      } catch (error) {\n        console.error('Error getting permission for notifications', error);\n      }\n    };\n    requestPermission();\n\n    // Handle incoming messages\n    const unsubscribe = onMessage(messaging, payload => {\n      console.log('Message received. ', payload);\n      // Customize notification here\n      new Notification(payload.notification.title, {\n        body: payload.notification.body,\n        icon: payload.notification.icon\n      });\n    });\n    return () => {\n      unsubscribe();\n    };\n  }, []);\n  const initialMessages = JSON.parse(localStorage.getItem('chatMessages')) || [{\n    message: \"Hello, I am ChatGPT!\",\n    sender: \"ChatGPT\"\n  }];\n  const [typing, setTyping] = useState(false);\n  const [messages, setMessages] = useState(initialMessages);\n  const saveMessagesToLocalStorage = messages => {\n    localStorage.setItem('chatMessages', JSON.stringify(messages));\n  };\n  const handleSend = async message => {\n    const newMessage = {\n      message: message,\n      sender: \"user\",\n      direction: \"outgoing\"\n    };\n    const newMessages = [...messages, newMessage];\n    setMessages(newMessages);\n    setTyping(true);\n    saveMessagesToLocalStorage(newMessages);\n    await processMessageToChatGPT(newMessages);\n  };\n  async function processMessageToChatGPT(chatMessages) {\n    let apiMessages = chatMessages.map(messageObject => {\n      let role = \"\";\n      if (messageObject.sender === \"ChatGPT\") {\n        role = \"assistant\";\n      } else {\n        role = \"user\";\n      }\n      return {\n        role: role,\n        content: messageObject.message\n      };\n    });\n    const systemMessage = {\n      role: \"system\",\n      content: \"Explain all concepts like I am 10 years old.\"\n    };\n    const apiRequestBody = {\n      \"model\": \"gpt-3.5-turbo\",\n      \"messages\": [systemMessage, ...apiMessages]\n    };\n    try {\n      const response = await fetch(\"https://api.openai.com/v1/chat/completions\", {\n        method: \"POST\",\n        headers: {\n          \"Authorization\": `Bearer ${API_KEY}`,\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(apiRequestBody)\n      });\n      if (!response.ok) {\n        console.error(\"Failed to fetch from OpenAI API:\", response.statusText);\n        return;\n      }\n      const data = await response.json();\n      console.log(\"API Response:\", data);\n      if (data && data.choices && data.choices.length > 0) {\n        const newMessages = [...chatMessages, {\n          message: data.choices[0].message.content,\n          sender: \"ChatGPT\"\n        }];\n        setMessages(newMessages);\n        setTyping(false);\n        saveMessagesToLocalStorage(newMessages);\n      } else {\n        console.error(\"Unexpected response structure from OpenAI API\", data);\n      }\n    } catch (error) {\n      console.error(\"Error while communicating with OpenAI API\", error);\n    }\n  }\n  const clearMessages = () => {\n    localStorage.removeItem('chatMessages');\n    setMessages([]);\n  };\n  return /*#__PURE__*/_jsxDEV(Router, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(Routes, {\n        children: [/*#__PURE__*/_jsxDEV(Route, {\n          exact: true,\n          path: \"/\",\n          element: /*#__PURE__*/_jsxDEV(LandingPage, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 146,\n            columnNumber: 42\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/chat\",\n          element: /*#__PURE__*/_jsxDEV(Chat, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 147,\n            columnNumber: 40\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          position: \"relative\",\n          height: \"800px\",\n          width: \"700px\"\n        },\n        children: /*#__PURE__*/_jsxDEV(MainContainer, {\n          children: /*#__PURE__*/_jsxDEV(ChatContainer, {\n            children: [/*#__PURE__*/_jsxDEV(MessageList, {\n              typingIndicator: typing ? /*#__PURE__*/_jsxDEV(TypingIndicator, {\n                content: \"ChatGPT is typing\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 152,\n                columnNumber: 54\n              }, this) : null,\n              children: messages.map((message, i) => /*#__PURE__*/_jsxDEV(Message, {\n                model: message\n              }, i, false, {\n                fileName: _jsxFileName,\n                lineNumber: 154,\n                columnNumber: 19\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 152,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(MessageInput, {\n              placeholder: \"Type message here\",\n              onSend: handleSend\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 157,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: clearMessages,\n              children: \"Terminate Chat Session\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 158,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 151,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 143,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"fw7SJpLc7DEPT3+wfCFgehmSF98=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","BrowserRouter","Router","Route","Routes","ChatContainer","MessageList","Message","MessageInput","TypingIndicator","MainContainer","LandingPage","Chat","messaging","getToken","onMessage","jsxDEV","_jsxDEV","API_KEY","App","_s","requestPermission","permission","Notification","console","log","token","vapidKey","error","unsubscribe","payload","notification","title","body","icon","initialMessages","JSON","parse","localStorage","getItem","message","sender","typing","setTyping","messages","setMessages","saveMessagesToLocalStorage","setItem","stringify","handleSend","newMessage","direction","newMessages","processMessageToChatGPT","chatMessages","apiMessages","map","messageObject","role","content","systemMessage","apiRequestBody","response","fetch","method","headers","ok","statusText","data","json","choices","length","clearMessages","removeItem","children","className","exact","path","element","fileName","_jsxFileName","lineNumber","columnNumber","style","position","height","width","typingIndicator","i","model","placeholder","onSend","onClick","_c","$RefreshReg$"],"sources":["/Users/lanekearney/Downloads/cosmochat-ui-rex/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { BrowserRouter as Router, Route, Routes } from 'react-router-dom';\nimport './App.css';\nimport '@chatscope/chat-ui-kit-styles/dist/default/styles.min.css';\nimport { ChatContainer, MessageList, Message, MessageInput, TypingIndicator, MainContainer } from \"@chatscope/chat-ui-kit-react\";\nimport LandingPage from './components/LandingPage';\nimport Chat from './components/Chat';\nimport { messaging, getToken, onMessage } from './firebase-config';\n\n// Define your API_KEY here or better yet, use an environment variable\nconst API_KEY = \"sk-proj-9ohctNN2DMHwcBtkKXbCT3BlbkFJnltg82Pj7zjyQMe6AzI0\";\n\nconst App = () => {\n\n  useEffect(() => {\n    // Request permission to send notifications\n    const requestPermission = async () => {\n      try {\n        const permission = await Notification.requestPermission();\n        if (permission === 'granted') {\n          console.log('Notification permission granted.');\n          // Get FCM token\n          const token = await getToken(messaging, { vapidKey: 'YOUR_VAPID_KEY' });\n          console.log('FCM Token:', token);\n        } else {\n          console.log('Unable to get permission to notify.');\n        }\n      } catch (error) {\n        console.error('Error getting permission for notifications', error);\n      }\n    };\n\n    requestPermission();\n\n    // Handle incoming messages\n    const unsubscribe = onMessage(messaging, (payload) => {\n      console.log('Message received. ', payload);\n      // Customize notification here\n      new Notification(payload.notification.title, {\n        body: payload.notification.body,\n        icon: payload.notification.icon,\n      });\n    });\n\n    return () => {\n      unsubscribe();\n    };\n  }, []);\n\n  const initialMessages = JSON.parse(localStorage.getItem('chatMessages')) || [\n    {\n      message: \"Hello, I am ChatGPT!\",\n      sender: \"ChatGPT\"\n    }\n  ];\n\n  const [typing, setTyping] = useState(false);\n  const [messages, setMessages] = useState(initialMessages);\n\n  const saveMessagesToLocalStorage = (messages) => {\n    localStorage.setItem('chatMessages', JSON.stringify(messages));\n  };\n\n  const handleSend = async (message) => {\n    const newMessage = {\n      message: message,\n      sender: \"user\",\n      direction: \"outgoing\"\n    };\n    const newMessages = [...messages, newMessage];\n    setMessages(newMessages);\n    setTyping(true);\n    saveMessagesToLocalStorage(newMessages);\n    await processMessageToChatGPT(newMessages);\n  };\n\n  async function processMessageToChatGPT(chatMessages) {\n    let apiMessages = chatMessages.map((messageObject) => {\n      let role = \"\";\n      if (messageObject.sender === \"ChatGPT\") {\n        role = \"assistant\";\n      } else {\n        role = \"user\";\n      }\n      return { role: role, content: messageObject.message };\n    });\n\n    const systemMessage = {\n      role: \"system\",\n      content: \"Explain all concepts like I am 10 years old.\"\n    };\n\n    const apiRequestBody = {\n      \"model\": \"gpt-3.5-turbo\",\n      \"messages\": [\n        systemMessage,\n        ...apiMessages\n      ]\n    };\n\n    try {\n      const response = await fetch(\"https://api.openai.com/v1/chat/completions\", {\n        method: \"POST\",\n        headers: {\n          \"Authorization\": `Bearer ${API_KEY}`,\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(apiRequestBody)\n      });\n\n      if (!response.ok) {\n        console.error(\"Failed to fetch from OpenAI API:\", response.statusText);\n        return;\n      }\n\n      const data = await response.json();\n      console.log(\"API Response:\", data);\n\n      if (data && data.choices && data.choices.length > 0) {\n        const newMessages = [\n          ...chatMessages, {\n            message: data.choices[0].message.content,\n            sender: \"ChatGPT\"\n          }\n        ];\n        setMessages(newMessages);\n        setTyping(false);\n        saveMessagesToLocalStorage(newMessages);\n      } else {\n        console.error(\"Unexpected response structure from OpenAI API\", data);\n      }\n    } catch (error) {\n      console.error(\"Error while communicating with OpenAI API\", error);\n    }\n  }\n\n  const clearMessages = () => {\n    localStorage.removeItem('chatMessages');\n    setMessages([]);\n  };\n\n  return (\n    <Router>\n      <div className=\"App\">\n        <Routes>\n          <Route exact path=\"/\" element={<LandingPage />} />\n          <Route path=\"/chat\" element={<Chat />} />\n        </Routes>\n        <div style={{ position: \"relative\", height: \"800px\", width: \"700px\" }}>\n          <MainContainer>\n            <ChatContainer>\n              <MessageList typingIndicator={typing ? <TypingIndicator content=\"ChatGPT is typing\" /> : null}>\n                {messages.map((message, i) => (\n                  <Message key={i} model={message} />\n                ))}\n              </MessageList>\n              <MessageInput placeholder=\"Type message here\" onSend={handleSend} />\n              <button onClick={clearMessages}>Terminate Chat Session</button>\n            </ChatContainer>\n          </MainContainer>\n        </div>\n      </div>\n    </Router>\n  );\n};\n\nexport default App;\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}